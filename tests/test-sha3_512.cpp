#include <deque>
#include <hashlib/sha3.h>
#include "common.h"

TEST_CASE("testing sha3_512") {
    using namespace hashlib_testing::literals;
    hashlib::sha3_512 sha3_512;

    SUBCASE("empty string") {
        CHECK_EQ(sha3_512.hexdigest(), "a69f73cca23a9ac5c8b567dc185a756e97c982164fe25859e0d1dcc1475c80a615b2123af1f5f94c11e3e9402c3ac558f500199d95b6d3e301758586281dcd26");
    }

    SUBCASE("basic string") {
        sha3_512.update("hello world"_s);
        CHECK_EQ(sha3_512.hexdigest(), "840006653e9ac9e95117a15c915caab81662918e925de9e004f774ff82d7079a40d4d27b1b372657c61d46d470304c88c788b3a4527ad074d1dccbee5dbaa99a");
    }

    SUBCASE("multiple updates") {
        sha3_512.update("The quick brown fox "_s);
        sha3_512.update("jumps over "_s);
        sha3_512.update("the lazy dog"_s);
        CHECK_EQ(sha3_512.hexdigest(), "01dedd5de4ef14642445ba5f5b97c15e47b9ad931326e4b0727cd94cefc44fff23f07bf543139939b49128caf436dc1bdee54fcb24023a08d9403f9b4bf0d450");
    }

    SUBCASE("random access range") {
        std::pair<const char*, std::deque<unsigned char>> deques[] {
            {
                "fd0e82019b4281a4a1a9e5b6f6ce32bf3c40ab89b935e5194efb6297a914f7cdf7cf48ba990823f35436e0447de6475cf80bdf639f3fe9f0d3456703318f5a33",
                std::deque<unsigned char>{
                    0x63, 0x6d, 0x78, 0x88, 0x93, 0x4f, 0x1c, 0xc7,
                    0x01, 0x1e, 0xd8, 0xd2, 0xd4, 0x3b, 0xfc, 0x56,
                    0x1f, 0x3b, 0x0e, 0xbe, 0xa5, 0x7b, 0xcc, 0x12,
                    0xb2, 0xf2, 0xe7, 0xf8, 0x35, 0x9d, 0x5f, 0x91,
                    0x65, 0x40, 0xb6, 0xe5, 0xcd, 0x23, 0x92, 0x8e,
                    0xf2, 0x58, 0x48, 0xf2, 0x9a, 0x91, 0x7e, 0x7f,
                    0xbe, 0x67, 0xc7, 0x0a, 0x2d, 0xcd, 0x3a, 0xd2,
                    0x77, 0xe0, 0xa4, 0xbe, 0x62, 0x81, 0xbc, 0xec,
                    0x00, 0x00, 0x87, 0xdc, 0x0f, 0x21, 0xec, 0x2b,
                    0x57, 0x03, 0x6c, 0xad, 0x46, 0x0f, 0xe7, 0xcd,
                    0xe2, 0x9c, 0x9e, 0xd4, 0x73, 0xd3, 0x4a, 0xf5,
                    0xb6, 0x1c, 0x01, 0x89, 0xfd, 0x30, 0xd0, 0x7e,
                    0x56, 0x49, 0xc5, 0x3a, 0xfd, 0xd1, 0x79, 0xa8,
                    0x3f, 0x2d, 0x38, 0x30, 0x20, 0x78, 0x7a, 0x81,
                    0x0a, 0x9c, 0x94, 0xb8, 0x46, 0x42, 0x7e, 0xc6,
                    0x2a, 0x0b, 0x5f, 0xe6, 0x5e, 0x3f, 0xd3, 0x23,
                    0xbf, 0x04, 0x7f, 0x16, 0x25, 0x17, 0x98, 0x3e,
                    0x57, 0xf2, 0x2a, 0x39, 0x1b, 0xb2, 0x8b, 0x8e,
                    0x6e, 0xf7, 0xf7, 0x87, 0x54, 0xa4, 0x5f, 0x9d,
                    0xff, 0x7a, 0x7b, 0xb9, 0x93, 0xa4, 0xcc, 0x82,
                    0x35, 0x53, 0xc4, 0x1a, 0xe6, 0xe5, 0x5b, 0x39,
                    0xa3, 0xe6, 0xc9, 0xca, 0xc4, 0x36, 0x7c, 0xfe,
                    0x1a, 0xd7, 0x37, 0xb8, 0xe1, 0x37, 0xb6, 0x62,
                    0x89, 0x56, 0xb4, 0xb4, 0xac, 0x60, 0x67, 0x50,
                    0x34, 0xaa, 0xd0, 0x5b, 0x0b, 0x88, 0x1a, 0xdc,
                    0x2d, 0xbf, 0x19, 0xd2, 0xa7, 0x86, 0x84, 0xa9,
                    0x88, 0xa7, 0x96, 0x26, 0xb9, 0xd8, 0xef, 0x03,
                    0x52, 0xf9, 0x61, 0x10, 0x83, 0x10, 0xc2, 0x3c,
                    0x14, 0x5e, 0x15, 0x24, 0x1f, 0xd2, 0x45, 0xa9,
                    0x33, 0x93, 0x96, 0xba, 0x07, 0x00, 0xfb, 0xc8,
                    0xd3, 0x7b, 0xb0, 0x8c, 0x9f, 0xbe, 0x77, 0x14,
                    0x6b, 0x39, 0x7d, 0x6e, 0xe9
                }
            },
            {
                "561f8f1b76b7dc3f8253869e32f81a0d9bab4f37909d8f50f067bd33387afb13f1977832b3ad6004ccece3696236ae9a258a5eb2c5a45dec287ae2f8ec91a6c4",
                {
                    0x6b, 0xce, 0xc9, 0xa9, 0xdc, 0x16, 0x02, 0x53,
                    0x9c, 0x42, 0xc6, 0xc2, 0x12, 0x80, 0x2e, 0x9c,
                    0x9d, 0xdf, 0x5b, 0x35, 0x9b, 0x39, 0x91, 0xdf,
                    0x2b, 0x54, 0x69, 0x95, 0x7b, 0xc8, 0xec, 0x4c,
                    0x39, 0x0a, 0xf7, 0x84, 0x18, 0x23, 0xea, 0x40,
                    0x49, 0xaa, 0x00, 0x03, 0x8e, 0x85, 0xc3, 0x5e,
                    0x75, 0x6b, 0xa6, 0xaf, 0x6e, 0x34, 0x5a, 0xee,
                    0x02, 0xdb, 0x55, 0x5b, 0x53, 0xa3, 0x50, 0x31,
                    0x75, 0xef, 0x52, 0x96, 0x9b, 0x6e, 0x5e, 0x28,
                    0xfe, 0x20, 0x23, 0x3d, 0x6b, 0x4e, 0x24, 0x1b,
                    0x5d, 0x0f, 0xc8, 0xc8, 0xb0, 0x4a, 0x3f, 0xcb,
                    0xe7, 0x3c, 0xdc, 0x62, 0x3c, 0xa5, 0x09, 0x04,
                    0x0d, 0x4d, 0x21, 0xc1, 0x88, 0x24
                }
            }
        };
        for (const auto& pair : deques) {
            SUBCASE(pair.first) {
                sha3_512.update(pair.second);
                CHECK_EQ(sha3_512.hexdigest(), pair.first);
            }
        }
    }

    SUBCASE("files") {
        std::string dir = HASHLIB_TEST_DIR"/files/sha3_512/";
        auto filenames = {
            "20658dc5931330717327efa045636733a2d3203ca612b0041633e3dd6c2fce0e488f0155e97dc9961328d7b2be26de583c36b5d8d7e5c474189943a50f672122",
            "24ce6fba06614bf7795d45ca1a96885883eb05d00371d48dc6235b250fcbc12ba01092b23467bf6b97c68395a58788dada0a5b560ca59fccd26480492276143e",
            "3d9e9428f705e70047edcd482c9d490ae3552a4722cfcec2c458940bbce3639d4f46ffac87ef33f6d877761fa7cbdcbb37fedd03850a1e9a38ac4ece9d212b83",
            "7c88d42d366cf11cb73ec851bf3b10f7ce85753d48b872544b4fc66f54bd411609cb594044454dddc049a172c1165ef1e7aa000166e5af5da8136db34634d404",
            "952ebc4ddb84e63738a3e6d5968def21546cd1122ffcfce2110d6ff52f63286659776e01c65ce7c06d21fe5009b43c3606348233e7784eafc169a14814b8b737",
            "acef04726c5516700b501e9a9b70a1d10684585327e8a040d3a355953c7f89e22a21f737a3af123095343d73155e15e10a9d480d5a0e0e0876590f28559a14cd",
            "bb2d04a2c43f196081ec573072b03ff474d20bd8eb7457e405b65cedbae1ca97acc0f090ab300e515982e65bff65275e07f38a49043471d1f764a9124424192f",
            "f4160714a5d64b43fc24544b226b9ca024de361ee2447fa8f0280bb617934bb7bd5121713f1a0254cac69b40eca6baa04b5ea4e6e78bd55f57d41140dafb3d00"
        };
        for (auto filename : filenames) {
            SUBCASE(filename) {
                std::ifstream file{dir + filename, std::ios::in | std::ios::binary};
                REQUIRE(file.is_open());
                sha3_512.update(std::istreambuf_iterator<char>{file}, std::istreambuf_iterator<char>{});
                CHECK_EQ(sha3_512.hexdigest(), filename);
            }
        }
    }
}