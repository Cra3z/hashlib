#include <deque>
#include <hashlib/sha224_and_sha256.hpp>
#include "common.h"

TEST_CASE("testing sha256") {
    using namespace hashlib_testing::literals;
    hashlib::sha256 sha256;

    SUBCASE("empty string") {
        CHECK_EQ(sha256.hexdigest(), "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855");
    }

    SUBCASE("basic string") {
        sha256.update("hello world"_s);
        CHECK_EQ(sha256.hexdigest(), "b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9");
    }

    SUBCASE("multiple updates") {
        sha256.update("hello"_s);
        sha256.update(" "_s);
        sha256.update("world"_s);
        CHECK_EQ(sha256.hexdigest(), "b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9");
    }

    SUBCASE("long string") {
        std::string input(1000, 'a');  // 1000 'a' characters
        sha256.update(input);
        CHECK_EQ(sha256.hexdigest(), "41edece42d63e8d9bf515a9ba6932e1c20cbc9f5a5d134645adb5db1b9737ea3");
    }

    SUBCASE("random access range") {
        std::pair<const char*, std::deque<unsigned char>> deques[] {
            {
                "72c4613a1bd8f58892efaa211587544920d1fa6a041a7c7be86990c6cb6c8278",
                std::deque<unsigned char>{
                    0x63, 0x6d, 0x78, 0x88, 0x93, 0x4f, 0x1c, 0xc7,
                    0x01, 0x1e, 0xd8, 0xd2, 0xd4, 0x3b, 0xfc, 0x56,
                    0x1f, 0x3b, 0x0e, 0xbe, 0xa5, 0x7b, 0xcc, 0x12,
                    0xb2, 0xf2, 0xe7, 0xf8, 0x35, 0x9d, 0x5f, 0x91,
                    0x65, 0x40, 0xb6, 0xe5, 0xcd, 0x23, 0x92, 0x8e,
                    0xf2, 0x58, 0x48, 0xf2, 0x9a, 0x91, 0x7e, 0x7f,
                    0xbe, 0x67, 0xc7, 0x0a, 0x2d, 0xcd, 0x3a, 0xd2,
                    0x77, 0xe0, 0xa4, 0xbe, 0x62, 0x81, 0xbc, 0xec,
                    0x00, 0x00, 0x87, 0xdc, 0x0f, 0x21, 0xec, 0x2b,
                    0x57, 0x03, 0x6c, 0xad, 0x46, 0x0f, 0xe7, 0xcd,
                    0xe2, 0x9c, 0x9e, 0xd4, 0x73, 0xd3, 0x4a, 0xf5,
                    0xb6, 0x1c, 0x01, 0x89, 0xfd, 0x30, 0xd0, 0x7e,
                    0x56, 0x49, 0xc5, 0x3a, 0xfd, 0xd1, 0x79, 0xa8,
                    0x3f, 0x2d, 0x38, 0x30, 0x20, 0x78, 0x7a, 0x81,
                    0x0a, 0x9c, 0x94, 0xb8, 0x46, 0x42, 0x7e, 0xc6,
                    0x2a, 0x0b, 0x5f, 0xe6, 0x5e, 0x3f, 0xd3, 0x23,
                    0xbf, 0x04, 0x7f, 0x16, 0x25, 0x17, 0x98, 0x3e,
                    0x57, 0xf2, 0x2a, 0x39, 0x1b, 0xb2, 0x8b, 0x8e,
                    0x6e, 0xf7, 0xf7, 0x87, 0x54, 0xa4, 0x5f, 0x9d,
                    0xff, 0x7a, 0x7b, 0xb9, 0x93, 0xa4, 0xcc, 0x82,
                    0x35, 0x53, 0xc4, 0x1a, 0xe6, 0xe5, 0x5b, 0x39,
                    0xa3, 0xe6, 0xc9, 0xca, 0xc4, 0x36, 0x7c, 0xfe,
                    0x1a, 0xd7, 0x37, 0xb8, 0xe1, 0x37, 0xb6, 0x62,
                    0x89, 0x56, 0xb4, 0xb4, 0xac, 0x60, 0x67, 0x50,
                    0x34, 0xaa, 0xd0, 0x5b, 0x0b, 0x88, 0x1a, 0xdc,
                    0x2d, 0xbf, 0x19, 0xd2, 0xa7, 0x86, 0x84, 0xa9,
                    0x88, 0xa7, 0x96, 0x26, 0xb9, 0xd8, 0xef, 0x03,
                    0x52, 0xf9, 0x61, 0x10, 0x83, 0x10, 0xc2, 0x3c,
                    0x14, 0x5e, 0x15, 0x24, 0x1f, 0xd2, 0x45, 0xa9,
                    0x33, 0x93, 0x96, 0xba, 0x07, 0x00, 0xfb, 0xc8,
                    0xd3, 0x7b, 0xb0, 0x8c, 0x9f, 0xbe, 0x77, 0x14,
                    0x6b, 0x39, 0x7d, 0x6e, 0xe9
                }
            },
            {
                "ec4b3dfde0f4bf6b6d171ec7fadd73f080693732ca229a8beb65a29c2b241989",
                {
                    0x6b, 0xce, 0xc9, 0xa9, 0xdc, 0x16, 0x02, 0x53,
                    0x9c, 0x42, 0xc6, 0xc2, 0x12, 0x80, 0x2e, 0x9c,
                    0x9d, 0xdf, 0x5b, 0x35, 0x9b, 0x39, 0x91, 0xdf,
                    0x2b, 0x54, 0x69, 0x95, 0x7b, 0xc8, 0xec, 0x4c,
                    0x39, 0x0a, 0xf7, 0x84, 0x18, 0x23, 0xea, 0x40,
                    0x49, 0xaa, 0x00, 0x03, 0x8e, 0x85, 0xc3, 0x5e,
                    0x75, 0x6b, 0xa6, 0xaf, 0x6e, 0x34, 0x5a, 0xee,
                    0x02, 0xdb, 0x55, 0x5b, 0x53, 0xa3, 0x50, 0x31,
                    0x75, 0xef, 0x52, 0x96, 0x9b, 0x6e, 0x5e, 0x28,
                    0xfe, 0x20, 0x23, 0x3d, 0x6b, 0x4e, 0x24, 0x1b,
                    0x5d, 0x0f, 0xc8, 0xc8, 0xb0, 0x4a, 0x3f, 0xcb,
                    0xe7, 0x3c, 0xdc, 0x62, 0x3c, 0xa5, 0x09, 0x04,
                    0x0d, 0x4d, 0x21, 0xc1, 0x88, 0x24
                }
            }
        };
        for (const auto& pair : deques) {
            SUBCASE(pair.first) {
                sha256.update(pair.second);
                CHECK_EQ(sha256.hexdigest(), pair.first);
            }
        }
    }

    SUBCASE("files") {
        std::string dir = HASHLIB_TEST_DIR"/files/sha256/";
        auto filenames = {
            "12e3d508453dba4ac11545a1a4f5d684058752f27b1a87c59b4dd270ce6f0c8e",
            "193442bab43399feb8a9f755b67197563e69a4a5e24eb9d25a801e14199f4d93",
            "551b4599583cac123c4b26e1fa9d1a2009bb2c8700aa925d917f18fb30cef0eb",
            "6daf2e956ed820815f64d61bd78d35b162507009bf7e73e46767d58cb409df12",
            "86c7242ddf4762df914d53adeb7fc9eeecd4ba0fbdbc98d38925b9d115512deb",
            "931a305319903cfbbec6bcac57ec4b9a00893079e7a998caf44250cb949fab67",
            "c61f9e7c137384497ed0864e649f13dbc82d2608b2c8b573aff13f7a857a4bd8",
            "da1fe846db926bb2522bb8253cd6cf12608787737d54e055493c6389f9a81a67"
        };
        for (auto filename : filenames) {
            SUBCASE(filename) {
                std::ifstream file{dir + filename, std::ios::in | std::ios::binary};
                REQUIRE(file.is_open());
                sha256.update(std::istreambuf_iterator<char>{file}, std::istreambuf_iterator<char>{});
                CHECK_EQ(sha256.hexdigest(), filename);
            }
        }
    }
}