#include <deque>
#include <hashlib/sha3.h>
#include "common.h"

TEST_CASE("testing sha3_384") {
    using namespace hashlib_testing::literals;
    hashlib::sha3_384 sha3_384;

    SUBCASE("empty string") {
        CHECK_EQ(sha3_384.hexdigest(), "0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2ac3713831264adb47fb6bd1e058d5f004");
    }

    SUBCASE("basic string") {
        sha3_384.update("hello world"_s);
        CHECK_EQ(sha3_384.hexdigest(), "83bff28dde1b1bf5810071c6643c08e5b05bdb836effd70b403ea8ea0a634dc4997eb1053aa3593f590f9c63630dd90b");
    }

    SUBCASE("multiple updates") {
        sha3_384.update("The quick brown fox "_s);
        sha3_384.update("jumps over "_s);
        sha3_384.update("the lazy dog"_s);
        CHECK_EQ(sha3_384.hexdigest(), "7063465e08a93bce31cd89d2e3ca8f602498696e253592ed26f07bf7e703cf328581e1471a7ba7ab119b1a9ebdf8be41");
    }

    SUBCASE("random access range") {
        std::pair<const char*, std::deque<unsigned char>> deques[] {
            {
                "523999ccff69583a0eb70e19d89fa668776566bae88ef9cb42c119f2d85c2bf017a63cc96059caacf2072c443d924dc4",
                std::deque<unsigned char>{
                    0x63, 0x6d, 0x78, 0x88, 0x93, 0x4f, 0x1c, 0xc7,
                    0x01, 0x1e, 0xd8, 0xd2, 0xd4, 0x3b, 0xfc, 0x56,
                    0x1f, 0x3b, 0x0e, 0xbe, 0xa5, 0x7b, 0xcc, 0x12,
                    0xb2, 0xf2, 0xe7, 0xf8, 0x35, 0x9d, 0x5f, 0x91,
                    0x65, 0x40, 0xb6, 0xe5, 0xcd, 0x23, 0x92, 0x8e,
                    0xf2, 0x58, 0x48, 0xf2, 0x9a, 0x91, 0x7e, 0x7f,
                    0xbe, 0x67, 0xc7, 0x0a, 0x2d, 0xcd, 0x3a, 0xd2,
                    0x77, 0xe0, 0xa4, 0xbe, 0x62, 0x81, 0xbc, 0xec,
                    0x00, 0x00, 0x87, 0xdc, 0x0f, 0x21, 0xec, 0x2b,
                    0x57, 0x03, 0x6c, 0xad, 0x46, 0x0f, 0xe7, 0xcd,
                    0xe2, 0x9c, 0x9e, 0xd4, 0x73, 0xd3, 0x4a, 0xf5,
                    0xb6, 0x1c, 0x01, 0x89, 0xfd, 0x30, 0xd0, 0x7e,
                    0x56, 0x49, 0xc5, 0x3a, 0xfd, 0xd1, 0x79, 0xa8,
                    0x3f, 0x2d, 0x38, 0x30, 0x20, 0x78, 0x7a, 0x81,
                    0x0a, 0x9c, 0x94, 0xb8, 0x46, 0x42, 0x7e, 0xc6,
                    0x2a, 0x0b, 0x5f, 0xe6, 0x5e, 0x3f, 0xd3, 0x23,
                    0xbf, 0x04, 0x7f, 0x16, 0x25, 0x17, 0x98, 0x3e,
                    0x57, 0xf2, 0x2a, 0x39, 0x1b, 0xb2, 0x8b, 0x8e,
                    0x6e, 0xf7, 0xf7, 0x87, 0x54, 0xa4, 0x5f, 0x9d,
                    0xff, 0x7a, 0x7b, 0xb9, 0x93, 0xa4, 0xcc, 0x82,
                    0x35, 0x53, 0xc4, 0x1a, 0xe6, 0xe5, 0x5b, 0x39,
                    0xa3, 0xe6, 0xc9, 0xca, 0xc4, 0x36, 0x7c, 0xfe,
                    0x1a, 0xd7, 0x37, 0xb8, 0xe1, 0x37, 0xb6, 0x62,
                    0x89, 0x56, 0xb4, 0xb4, 0xac, 0x60, 0x67, 0x50,
                    0x34, 0xaa, 0xd0, 0x5b, 0x0b, 0x88, 0x1a, 0xdc,
                    0x2d, 0xbf, 0x19, 0xd2, 0xa7, 0x86, 0x84, 0xa9,
                    0x88, 0xa7, 0x96, 0x26, 0xb9, 0xd8, 0xef, 0x03,
                    0x52, 0xf9, 0x61, 0x10, 0x83, 0x10, 0xc2, 0x3c,
                    0x14, 0x5e, 0x15, 0x24, 0x1f, 0xd2, 0x45, 0xa9,
                    0x33, 0x93, 0x96, 0xba, 0x07, 0x00, 0xfb, 0xc8,
                    0xd3, 0x7b, 0xb0, 0x8c, 0x9f, 0xbe, 0x77, 0x14,
                    0x6b, 0x39, 0x7d, 0x6e, 0xe9
                }
            },
            {
                "ccd533e2a15ecc446435d0fbbc6ebcf36e06f109966a1e3ba69324e351f4ad976fde73cb763536542c1311556c5c7d02",
                {
                    0x6b, 0xce, 0xc9, 0xa9, 0xdc, 0x16, 0x02, 0x53,
                    0x9c, 0x42, 0xc6, 0xc2, 0x12, 0x80, 0x2e, 0x9c,
                    0x9d, 0xdf, 0x5b, 0x35, 0x9b, 0x39, 0x91, 0xdf,
                    0x2b, 0x54, 0x69, 0x95, 0x7b, 0xc8, 0xec, 0x4c,
                    0x39, 0x0a, 0xf7, 0x84, 0x18, 0x23, 0xea, 0x40,
                    0x49, 0xaa, 0x00, 0x03, 0x8e, 0x85, 0xc3, 0x5e,
                    0x75, 0x6b, 0xa6, 0xaf, 0x6e, 0x34, 0x5a, 0xee,
                    0x02, 0xdb, 0x55, 0x5b, 0x53, 0xa3, 0x50, 0x31,
                    0x75, 0xef, 0x52, 0x96, 0x9b, 0x6e, 0x5e, 0x28,
                    0xfe, 0x20, 0x23, 0x3d, 0x6b, 0x4e, 0x24, 0x1b,
                    0x5d, 0x0f, 0xc8, 0xc8, 0xb0, 0x4a, 0x3f, 0xcb,
                    0xe7, 0x3c, 0xdc, 0x62, 0x3c, 0xa5, 0x09, 0x04,
                    0x0d, 0x4d, 0x21, 0xc1, 0x88, 0x24
                }
            }
        };
        for (const auto& pair : deques) {
            SUBCASE(pair.first) {
                sha3_384.update(pair.second);
                CHECK_EQ(sha3_384.hexdigest(), pair.first);
            }
        }
    }

    SUBCASE("files") {
        std::string dir = HASHLIB_TEST_DIR"/files/sha3_384/";
        auto filenames = {
            "1a084fb82c93d1faa9062be35c0aa81d0a06d25ce83f1ff21cb307ca669e6a1f51eeda6d86b6f72a4dc19a205f396dc8",
            "4e247c0e64bf39ff3fa4c3baa478a1be710b5452d9740a0c6bb6b765af7657cfd4aafb9d58bdc0eb9137fc72f7bd9db3",
            "614e6723fcd2cd5ae307f14d9a8b9f4cbc2400551b8813f810e741fbeb52ff9cd0f8b8488efe595edec581382370ba46",
            "66c09c37d57b187b355ea14ca822d2e4df1fc31f7dec5251b2633d4a4ddd701dba576d3b4e977b7b6738dd5cdc8240cc",
            "6b4a78b0331a9f40c370c0ed064f0390fa8e5eb06fd36559272cd5e9b7f8ad275d918a36f4651a4ff57a53986327d687",
            "90eb2be9f9e76a4cda19b84c68a7f0d206e1decf4369356f103d7f6c2a20c9b7766fc9e0c1c4094b4c7c00b7eb3ff3af",
            "ed0f58bd9c4d52a285f0ca9b807d47b13f9cf98a926c6da30f3d8d706f0f5c4d41f2e809f55ff94aa9c5da42e8b8271f",
            "fcbce1be2332df0bbabdd6d69ba976ece75363fa0e5dc841a2390ac0fb6cc1d2af2b7de70b95e19427f1e80b4a5b648a"
        };
        for (auto filename : filenames) {
            SUBCASE(filename) {
                std::ifstream file{dir + filename, std::ios::in | std::ios::binary};
                REQUIRE(file.is_open());
                sha3_384.update(std::istreambuf_iterator<char>{file}, std::istreambuf_iterator<char>{});
                CHECK_EQ(sha3_384.hexdigest(), filename);
            }
        }
    }
}