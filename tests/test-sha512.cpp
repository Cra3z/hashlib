#include <deque>
#include <hashlib/sha384_and_sha512.hpp>
#include "common.h"

TEST_CASE("testing sha512") {
    using namespace hashlib_testing::literals;
    hashlib::sha512 sha512;

    SUBCASE("empty string") {
        CHECK_EQ(sha512.hexdigest(), "cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e");
    }

    SUBCASE("basic string") {
        sha512.update("hello world"_s);
        CHECK_EQ(sha512.hexdigest(), "309ecc489c12d6eb4cc40f50c902f2b4d0ed77ee511a7c7a9bcd3ca86d4cd86f989dd35bc5ff499670da34255b45b0cfd830e81f605dcf7dc5542e93ae9cd76f");
    }

    SUBCASE("multiple updates with clear") {
        sha512.update("test1"_s);
        sha512.clear();
        sha512.update("hello"_s);
        sha512.update(" "_s);
        sha512.update("world"_s);
        CHECK_EQ(sha512.hexdigest(), "309ecc489c12d6eb4cc40f50c902f2b4d0ed77ee511a7c7a9bcd3ca86d4cd86f989dd35bc5ff499670da34255b45b0cfd830e81f605dcf7dc5542e93ae9cd76f");
    }

    SUBCASE("binary data with zeros") {
        std::vector<hashlib::byte> data(128, 0);  // 128 zero bytes
        sha512.update(data);
        CHECK_EQ(sha512.hexdigest(), "ab942f526272e456ed68a979f50202905ca903a141ed98443567b11ef0bf25a552d639051a01be58558122c58e3de07d749ee59ded36acf0c55cd91924d6ba11");
    }

    SUBCASE("random access range") {
        std::pair<const char*, std::deque<unsigned char>> deques[] {
            {
                "a1e7cd08f2aae17ecd7d5b7a1ae74ae8f75cc8b6f13b192e38eb16abe121cf68ab519c844234fb1b5929d2429d160121badad3b6d5f9b2c14356ac03bbef9ed5",
                std::deque<unsigned char>{
                    0x63, 0x6d, 0x78, 0x88, 0x93, 0x4f, 0x1c, 0xc7,
                    0x01, 0x1e, 0xd8, 0xd2, 0xd4, 0x3b, 0xfc, 0x56,
                    0x1f, 0x3b, 0x0e, 0xbe, 0xa5, 0x7b, 0xcc, 0x12,
                    0xb2, 0xf2, 0xe7, 0xf8, 0x35, 0x9d, 0x5f, 0x91,
                    0x65, 0x40, 0xb6, 0xe5, 0xcd, 0x23, 0x92, 0x8e,
                    0xf2, 0x58, 0x48, 0xf2, 0x9a, 0x91, 0x7e, 0x7f,
                    0xbe, 0x67, 0xc7, 0x0a, 0x2d, 0xcd, 0x3a, 0xd2,
                    0x77, 0xe0, 0xa4, 0xbe, 0x62, 0x81, 0xbc, 0xec,
                    0x00, 0x00, 0x87, 0xdc, 0x0f, 0x21, 0xec, 0x2b,
                    0x57, 0x03, 0x6c, 0xad, 0x46, 0x0f, 0xe7, 0xcd,
                    0xe2, 0x9c, 0x9e, 0xd4, 0x73, 0xd3, 0x4a, 0xf5,
                    0xb6, 0x1c, 0x01, 0x89, 0xfd, 0x30, 0xd0, 0x7e,
                    0x56, 0x49, 0xc5, 0x3a, 0xfd, 0xd1, 0x79, 0xa8,
                    0x3f, 0x2d, 0x38, 0x30, 0x20, 0x78, 0x7a, 0x81,
                    0x0a, 0x9c, 0x94, 0xb8, 0x46, 0x42, 0x7e, 0xc6,
                    0x2a, 0x0b, 0x5f, 0xe6, 0x5e, 0x3f, 0xd3, 0x23,
                    0xbf, 0x04, 0x7f, 0x16, 0x25, 0x17, 0x98, 0x3e,
                    0x57, 0xf2, 0x2a, 0x39, 0x1b, 0xb2, 0x8b, 0x8e,
                    0x6e, 0xf7, 0xf7, 0x87, 0x54, 0xa4, 0x5f, 0x9d,
                    0xff, 0x7a, 0x7b, 0xb9, 0x93, 0xa4, 0xcc, 0x82,
                    0x35, 0x53, 0xc4, 0x1a, 0xe6, 0xe5, 0x5b, 0x39,
                    0xa3, 0xe6, 0xc9, 0xca, 0xc4, 0x36, 0x7c, 0xfe,
                    0x1a, 0xd7, 0x37, 0xb8, 0xe1, 0x37, 0xb6, 0x62,
                    0x89, 0x56, 0xb4, 0xb4, 0xac, 0x60, 0x67, 0x50,
                    0x34, 0xaa, 0xd0, 0x5b, 0x0b, 0x88, 0x1a, 0xdc,
                    0x2d, 0xbf, 0x19, 0xd2, 0xa7, 0x86, 0x84, 0xa9,
                    0x88, 0xa7, 0x96, 0x26, 0xb9, 0xd8, 0xef, 0x03,
                    0x52, 0xf9, 0x61, 0x10, 0x83, 0x10, 0xc2, 0x3c,
                    0x14, 0x5e, 0x15, 0x24, 0x1f, 0xd2, 0x45, 0xa9,
                    0x33, 0x93, 0x96, 0xba, 0x07, 0x00, 0xfb, 0xc8,
                    0xd3, 0x7b, 0xb0, 0x8c, 0x9f, 0xbe, 0x77, 0x14,
                    0x6b, 0x39, 0x7d, 0x6e, 0xe9
                }
            },
            {
                "830c56cc05be812c605abc25895d4f5c5b50320acd4955460502e3a4d8b9dff35fd3b97c29686fb0c7482528284289d6e746b8a7302c73361cbf57a6cbdd97a8",
                {
                    0x6b, 0xce, 0xc9, 0xa9, 0xdc, 0x16, 0x02, 0x53,
                    0x9c, 0x42, 0xc6, 0xc2, 0x12, 0x80, 0x2e, 0x9c,
                    0x9d, 0xdf, 0x5b, 0x35, 0x9b, 0x39, 0x91, 0xdf,
                    0x2b, 0x54, 0x69, 0x95, 0x7b, 0xc8, 0xec, 0x4c,
                    0x39, 0x0a, 0xf7, 0x84, 0x18, 0x23, 0xea, 0x40,
                    0x49, 0xaa, 0x00, 0x03, 0x8e, 0x85, 0xc3, 0x5e,
                    0x75, 0x6b, 0xa6, 0xaf, 0x6e, 0x34, 0x5a, 0xee,
                    0x02, 0xdb, 0x55, 0x5b, 0x53, 0xa3, 0x50, 0x31,
                    0x75, 0xef, 0x52, 0x96, 0x9b, 0x6e, 0x5e, 0x28,
                    0xfe, 0x20, 0x23, 0x3d, 0x6b, 0x4e, 0x24, 0x1b,
                    0x5d, 0x0f, 0xc8, 0xc8, 0xb0, 0x4a, 0x3f, 0xcb,
                    0xe7, 0x3c, 0xdc, 0x62, 0x3c, 0xa5, 0x09, 0x04,
                    0x0d, 0x4d, 0x21, 0xc1, 0x88, 0x24
                }
            }
        };
        for (const auto& pair : deques) {
            SUBCASE(pair.first) {
                sha512.update(pair.second);
                CHECK_EQ(sha512.hexdigest(), pair.first);
            }
        }
    }

    SUBCASE("files") {
        std::string dir = HASHLIB_TEST_DIR"/files/sha512/";
        auto filenames = {
            "15341a0518c9289fdefd762799d534d05aa16dd61ab12f2eff993a146e74876d6b4ee3ca0f1b17e1495fe8885eca4e7082b51dcd05b9ae9ac9c4fff8d1ad9a01",
            "1d5d8096763b41a72a47516645caff6784981175f23e80e1f50627bb19294247b4b7c712af6769026ba098c2b081e482608dcd0acb9623119bf505a4c695d662",
            "4e8082289244e9e105588e29a1e9f21c7a6455a013a4001a1eaa7249de628fa49b05a248e97bfe0de0a11b69b3cb3a1b6cee0773d2ba819204851453466cb50f",
            "6d04969a37fd7b28ef9510012f0ee80aaa172bc114f6c39cd7692627f3051d9ef2dac0b434119def797efaf1d4de37cfdc09e3260f2fe499a1868abc0b645964",
            "a98e0ca6b3a0b61c65d697498ae573d81cff80f50a376ba5b31b705da2bad340f7d98845e938d899c78591354c0e5638b7f1cc2857801c367d21937a1da6baf0",
            "aa57fc610f351d61a50d32fc588a2289659a5fb25a1a67a5fd1587b91b34ff7e390f610018a99ca77c78e7207340e6c1c1016215180d5faefba709151013bb74",
            "c9f76628fec04e025f12dc81749c2bac0bfb6a2e821991d29f7cca510bd0f0cab1f31ae46ca2baa48f02db2cb1fb921e6b280ba168815f7978fac2071ca61b85",
            "cf8f8c903f326664c93ce0586e744edf84b654ebb6feec8c857eeff453bdf22ffcbc847e01bfa1f2d0f54f53849045d33b6ead657118de57444ef30ee31cc39e"
        };
        for (auto filename : filenames) {
            SUBCASE(filename) {
                std::ifstream file{dir + filename, std::ios::in | std::ios::binary};
                REQUIRE(file.is_open());
                sha512.update(std::istreambuf_iterator<char>{file}, std::istreambuf_iterator<char>{});
                CHECK_EQ(sha512.hexdigest(), filename);
            }
        }
    }
}